buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
    }
}

apply plugin: "maven"
apply plugin: 'net.minecraftforge.gradle.forge'

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        name 'CraftTweaker/IE'
        url 'http://maven.blamejared.com'
    }
    maven {
        name 'JEI'
        url 'http://dvs1.progwml6.com/files/maven'
    }
    maven {
        name 'Tesla'
        url 'http://maven.epoxide.xyz'
    }
}


version = "${minecraft_version}-" + getVersion()

group = "com.teamacronymcoders.base" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "base"

minecraft {
    version = "${minecraft_version}-${forge_version}"
    runDir = "run"

    mappings = "${mappings_version}"

    replace "@VERSION@", project.version
    replaceIn "Reference.java"
}

dependencies {
    deobfCompile "mezz.jei:jei_${minecraft_version}:${jei_version}"
    deobfCompile "MineTweaker3:MineTweaker3-MC1102-Main:${minecraft_version}-${minetweaker_version}"
    deobfCompile "net.darkhax.tesla:Tesla:${minecraft_version}-${tesla_version}"
    deobfCompile "blusunrize:ImmersiveEngineering:${immersive_engineering_version}"
}

def commonManifest = {
    attributes 'Main-Class': 'com.acronym.base.Base'
    attributes 'FMLAT': 'base_at.cfg'
}

jar {
    manifest commonManifest
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    manifest commonManifest
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
    manifest commonManifest
}

artifacts {
    archives deobfJar
    archives srcJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "file://" + (System.getenv("local_maven") != null ? System.getenv("local_maven") : System.getenv("bamboo_local_maven")))
        }
    }
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task getLibraries {
    def libsFolder = new File('libs')
    if (!libsFolder.isDirectory()) {
        libsFolder.mkdirs()
    }

    def downloads = new ArrayList<Tuple>()

    def botania = 'Botania r' + botania_version + '-deobf.jar'
    def botaniaSource = 'http://botaniamod.net/files/deobf/' + botania

    def baubles = 'Baubles-' + minecraft_version + '-' + baubles_version + '-deobf.jar'
    def baublesSource = 'https://dl.dropboxusercontent.com/u/47135879/' + baubles
    downloads.add(new Tuple(botania, botaniaSource))
    downloads.add(new Tuple(baubles, baublesSource))

    libsFolder.listFiles().each { file ->
        def isInDownloadList = false;
        downloads.each { download ->
            if (file.name == download.get(0).toString()) {
                isInDownloadList = true;
            }
        }
        if (!isInDownloadList || file.size() < 5) {
            println "Deleting file " + file.name
            file.delete()
        }
    }

    downloads.each { download ->
        def fileLocation = new File('libs', download.get(0).toString())
        if (!fileLocation.exists()) {
            def downloadString = download.get(1).toString()
            if (downloadString.contains(" ")) {
                downloadString = downloadString.replace(" ", "%20");
            }
            if (!downloadString.equals("")) {
                println "Downloading " + download.get(0).toString()
                fileLocation.withOutputStream { out ->
                    new URL(downloadString).withInputStream { from ->
                        out << from;
                    }
                }
            }
        }
    }
}

String getVersion() {
    String version = "${base_version}"
    String branch = System.getenv("BRANCH") != null ? System.getenv("BRANCH") : ""

    if(branch != "") {
        version += "-" + branch

        String buildNumber = getBuildNumber()
        if(buildNumber != "") {
            version += "." + buildNumber
        }
    }

    return version
}

String getBuildNumber() {
    String buildNumber = System.getenv("BUILD_NUMBER") != null ? System.getenv("BUILD_NUMBER") : ""
    if(buildNumber == "") {
        buildNumber = System.getenv("bamboo_buildNumber") != null ? "." + System.getenv("bamboo_buildNumber") : ""
    }
    return buildNumber
}
